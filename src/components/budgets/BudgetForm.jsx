import React, { useState, useEffect } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";
import { Calendar } from "@/components/ui/calendar";
import { Switch } from "@/components/ui/switch";
import { X, Save, Target as TargetIcon, CalendarIcon as CalendarIconLucide, Check, ChevronsUpDown } from "lucide-react"; // Adicionado Check, ChevronsUpDown
import { Command, CommandEmpty, CommandGroup, CommandInput, CommandItem, CommandList } from "@/components/ui/command"; // Adicionado Command components
import { format, parseISO, startOfMonth, endOfMonth } from "date-fns";

const budgetPeriods = [
  { value: "monthly", label: "Mensal" },
  { value: "weekly", label: "Semanal" },
  { value: "yearly", label: "Anual" },
  // { value: "custom", label: "Personalizado" } // Adicionar depois se necessário
];

export default function BudgetForm({ budget, tags, onSave, onCancel }) {
  const initialStartDate = budget?.start_date ? parseISO(budget.start_date) : startOfMonth(new Date());
  const initialEndDate = budget?.end_date ? parseISO(budget.end_date) : endOfMonth(new Date());

  const [formData, setFormData] = useState({
    tag_id_base44: budget?.tag_id_base44 || (tags.length > 0 ? tags[0].id : ""),
    amount: budget?.amount || 0,
    period: budget?.period || "monthly",
    start_date: format(initialStartDate, "yyyy-MM-dd"),
    end_date: format(initialEndDate, "yyyy-MM-dd"),
    is_active: budget?.is_active !== false
  });
  const [isLoading, setIsLoading] = useState(false);
  const [dateRange, setDateRange] = useState({
    from: initialStartDate,
    to: initialEndDate
  });
  const [tagPopoverOpen, setTagPopoverOpen] = useState(false);
  const [tagSearchValue, setTagSearchValue] = useState("");


  useEffect(() => {
    const startDate = budget?.start_date ? parseISO(budget.start_date) : startOfMonth(new Date());
    const endDate = budget?.end_date ? parseISO(budget.end_date) : endOfMonth(new Date());
    
    const initialTagId = budget?.tag_id_base44 || (tags.length > 0 ? tags[0].id : "");
    setFormData({
      tag_id_base44: initialTagId,
      amount: budget?.amount || 0,
      period: budget?.period || "monthly",
      start_date: format(startDate, "yyyy-MM-dd"),
      end_date: format(endDate, "yyyy-MM-dd"),
      is_active: budget?.is_active !== false
    });
    setDateRange({ from: startDate, to: endDate });

    const currentTag = tags.find(t => t.id === initialTagId);
    setTagSearchValue(currentTag ? currentTag.name : "");

  }, [budget, tags]);

  useEffect(() => {
    if (formData.period === "monthly" && !budget) { // Só ajustar para 'monthly' se for novo ou período mudou para mensal
      const currentMonthStart = startOfMonth(new Date());
      const currentMonthEnd = endOfMonth(new Date());
      setDateRange({ from: currentMonthStart, to: currentMonthEnd });
      handleInputChange("start_date", format(currentMonthStart, "yyyy-MM-dd"));
      handleInputChange("end_date", format(currentMonthEnd, "yyyy-MM-dd"));
    }
    // Lógica para outros períodos pode ser adicionada aqui
  }, [formData.period, budget]);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setIsLoading(true);
    try {
      // Gerar nome automaticamente baseado na tag e período
      const selectedTag = tags.find(t => t.id === formData.tag_id_base44);
      const tagName = selectedTag ? selectedTag.name : 'Tag';
      
      const periodLabel = budgetPeriods.find(p => p.value === formData.period)?.label || 'Período';
      const autoGeneratedName = `Orçamento ${tagName} - ${periodLabel}`;
      
      await onSave({
        ...formData,
        name: autoGeneratedName
      });
    } catch (error) {
      console.error("Erro ao salvar orçamento:", error);
    }
    setIsLoading(false);
  };

  const handleInputChange = (field, value) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));
  };
  
  const handleDateRangeChange = (range) => {
    setDateRange(range);
    if (range?.from) handleInputChange("start_date", format(range.from, "yyyy-MM-dd"));
    if (range?.to) handleInputChange("end_date", format(range.to, "yyyy-MM-dd"));
  };

  const filteredTags = tags.filter(tag =>
    tag.name.toLowerCase().includes(tagSearchValue.toLowerCase())
  );
  const selectedTag = tags.find(t => t.id === formData.tag_id_base44); // Alterado aqui

  return (
    <Card className="shadow-xl border-0 max-h-[90vh] flex flex-col">
      <CardHeader className="bg-gradient-to-r from-orange-50 to-orange-100 border-b sticky top-0 z-10">
        <div className="flex items-center justify-between">
          <CardTitle className="flex items-center gap-3">
            <div className="p-2 bg-orange-100 rounded-lg">
              <TargetIcon className="w-6 h-6 text-orange-600" />
            </div>
            {budget ? "Editar Orçamento" : "Novo Orçamento"}
          </CardTitle>
          <Button variant="ghost" size="icon" onClick={onCancel}>
            <X className="w-5 h-5" />
          </Button>
        </div>
      </CardHeader>
      
      <CardContent className="p-8 overflow-y-auto flex-grow">
        <form onSubmit={handleSubmit} className="space-y-6">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div className="space-y-2">
              <Label htmlFor="amount" className="text-sm font-medium">
                Valor Planejado *
              </Label>
              <Input
                id="amount"
                type="number"
                step="0.01"
                value={formData.amount}
                onChange={(e) => handleInputChange("amount", parseFloat(e.target.value) || 0)}
                placeholder="0,00"
                required
                className="h-12"
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="tag_id_combobox" className="text-sm font-medium">
                Tag Associada *
              </Label>
              <Popover open={tagPopoverOpen} onOpenChange={setTagPopoverOpen}>
                <PopoverTrigger asChild>
                  <Button
                    variant="outline"
                    role="combobox"
                    aria-expanded={tagPopoverOpen}
                    className="w-full justify-between h-12 font-normal"
                    id="tag_id_combobox"
                  >
                    {selectedTag ? selectedTag.name : "Selecione uma tag..."}
                    <ChevronsUpDown className="ml-2 h-4 w-4 shrink-0 opacity-50" />
                  </Button>
                </PopoverTrigger>
                <PopoverContent className="w-[--radix-popover-trigger-width] p-0">
                  <Command>
                    <CommandInput
                      placeholder="Buscar tag..."
                      value={tagSearchValue}
                      onValueChange={setTagSearchValue}
                    />
                    <CommandList>
                      <CommandEmpty>Nenhuma tag encontrada.</CommandEmpty>
                      <CommandGroup>
                        {filteredTags.map((tag) => (
                          <CommandItem
                            key={tag.id}
                            value={tag.name}
                            onSelect={(currentValue) => {
                              const currentSelectedTag = tags.find(t => t.name.toLowerCase() === currentValue.toLowerCase());
                              handleInputChange("tag_id_base44", currentSelectedTag ? currentSelectedTag.id : ""); // Alterado aqui
                              setTagSearchValue(currentSelectedTag ? currentSelectedTag.name : "");
                              setTagPopoverOpen(false);
                            }}
                          >
                            <Check
                              className={`mr-2 h-4 w-4 ${formData.tag_id_base44 === tag.id ? "opacity-100" : "opacity-0"}`} // Alterado aqui
                            />
                            {tag.name}
                          </CommandItem>
                        ))}
                      </CommandGroup>
                    </CommandList>
                  </Command>
                </PopoverContent>
              </Popover>
            </div>
          </div>
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
             <div className="space-y-2">
              <Label htmlFor="period" className="text-sm font-medium">
                Período *
              </Label>
              <Select
                value={formData.period}
                onValueChange={(value) => handleInputChange("period", value)}
              >
                <SelectTrigger className="h-12">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  {budgetPeriods.map((p) => (
                    <SelectItem key={p.value} value={p.value}>
                      {p.label}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
            <div className="space-y-2">
              <Label htmlFor="date_range" className="text-sm font-medium">
                Datas de Início e Fim *
              </Label>
              <Popover>
                <PopoverTrigger asChild>
                  <Button
                    variant="outline"
                    className="h-12 w-full justify-start text-left font-normal"
                  >
                    <CalendarIconLucide className="mr-2 h-4 w-4" />
                    {dateRange?.from ? (
                        dateRange.to ? (
                            <>{format(dateRange.from, "dd/MM/yy")} - {format(dateRange.to, "dd/MM/yy")}</>
                        ) : (format(dateRange.from, "dd/MM/yy"))
                    ) : ( <span>Escolha o período</span>)}
                  </Button>
                </PopoverTrigger>
                <PopoverContent className="w-auto p-0">
                  <Calendar
                    initialFocus
                    mode="range"
                    defaultMonth={dateRange?.from}
                    selected={dateRange}
                    onSelect={handleDateRangeChange}
                    numberOfMonths={2}
                  />
                </PopoverContent>
              </Popover>
            </div>
          </div>
          
          <div className="flex items-center justify-between p-4 bg-gray-50 rounded-lg">
            <div>
              <Label htmlFor="is_active" className="text-sm font-medium">
                Orçamento Ativo
              </Label>
              <p className="text-xs text-gray-600 mt-1">
                Orçamentos inativos não são mostrados no acompanhamento.
              </p>
            </div>
            <Switch
              id="is_active"
              checked={formData.is_active}
              onCheckedChange={(checked) => handleInputChange("is_active", checked)}
            />
          </div>

          <div className="flex justify-end gap-4 pt-6 border-t sticky bottom-0 bg-white py-6 z-10">
            <Button
              type="button"
              variant="outline"
              onClick={onCancel}
              disabled={isLoading}
              className="h-12 px-8"
            >
              Cancelar
            </Button>
            <Button
              type="submit"
              disabled={isLoading || !formData.tag_id_base44} // Alterado aqui
              className="h-12 px-8 bg-orange-600 hover:bg-orange-700"
            >
              {isLoading ? (
                <>
                  <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin mr-2" />
                  Salvando...
                </>
              ) : (
                <>
                  <Save className="w-4 h-4 mr-2" />
                  {budget ? "Atualizar" : "Criar"} Orçamento
                </>
              )}
            </Button>
          </div>
        </form>
      </CardContent>
    </Card>
  );
}
